**vue 

1. 설치
    vue script를 사용하여 기존코드에 추가 하여 사용하는 방법이 있고 (cdn 써야댐)
    vue cli를 사용하여 vue프로젝트를 생성하여 사용할 수 있음

2. 데이터 바인딩 v-bind 
    vue 인스턴스의 data랑 속성을 이어주는 것
    v-vind:value="" 이런식으로 사용하지만 :value 식으로 숏컷 가능

3. Event처리 v-on
    자바스크립트의 onclick, onchange 등 과 같은 이벤트 처리 
    v-on:click 이런식으로 event 처리가 가능 
    v-on:을 @click처럼 골뱅이로 숏컷 가능 

4. preventDefault 
    a태그나 form태그에서 페이지가 리로드 되는 것을 막는 것 
    javascript 에서 event.preventDefault()식으로 사용 
    vue에서는 .prevent를 추가하여 v-on:submit.prevent="submit" 처럼 사용할 수 있음

5. 양방향 바인딩 v-model
    말그대로 바인딩을 양쪽으로 하여서 실시간으로 값이 변하는 것처럼 
    보여주는 효과를 줄 수 있음 

6. Computed
    간단한 js는 템플릿에서 사용할 수 있지만, 로직이 길어지면 가독성이 떨어지므로 Computed를 사용한다 
    그렇게하면 반복을 제거하고 가독성도 올라가며 유지보수가 쉬워져서 깨끗한 코드가 된다

7. Computed vs Methods 
    복잡한 로직을 Computed로 처리할 수 있지만 메소드를 만들어서 처리하는 것도 가능하다
    둘의 차이점은 Computed속성은 캐싱을 하고 Methods는 캐싱을 하지 않는 것 
    처음에 vue 인스턴스가 생성될때 Computed 속성이 먼저 실행되서 이미 처리를 시켜놓고 그걸 사용함
    반면 Methods는 생성될때 만들어지지 않고 호출될때마다 처리하는 방식

8. Watch
    지켜보고 있다가 바뀌면 처리하는 것 
    하지만 대부분의 경우 Computed를 사용함

9. 클래스 바인딩, 스타일 바인딩 
    :class="{red: isred, bold: isbold}"
    :style="{color: red, textSize: number}"
    이런식으로 속성하고 vue의 data값이랑 바인딩하여 사용할 수 있다.

10. 조건문 v-if 
    태그안에 속성으로 v-if를 주고 그 조건에 따라서 해당태그가 렌더링 될것인지를 정해줌 
    v-else-if를 사용하여 else if 문법을 사용할 수 있으며 
    v-else를 사용하여 v-if가 false 일때 값을 보여줄 태그를 사용할 수 있다. 
    

11. v-if vs v-show
    v-if는 flase이면 아예 태그자체를 렌더링을 안해버리는 조건부 렌더링 게을러서 false면 아무것도 안함 
    v-show는 항상 렌더링을 하여 flase일때도 렌더링은 하지만 display: false로 사용자에게 안보이게 해줌 
    그래서 태그자체는 남아있게됨 
    if는 토글 비용이 높고 show는 초기 비용이 높음 그래서 자주 바꾸게 되는 태그는 v-show를 사용 권장

12. 반복문 v-for 
    v-for="person in people" 이런식으로 vue data의 people이라는 배열에서
    한개씩 끄집어내서 person으로 태그안에서 template로 사용할 수 있다
    가져올때 괄호로 (person, index) 이런식으로 두번째 인자값을 주면 해당 사이클의 index값을 가져옴

13. v-for의 key속성
    각각의 항목들의 고유한 값을 설정해주는 것으로  
    데이터베이스에서 가져온 값이라면 id값을 key값으로 정해주는 것이 이상적이고 
    고유한 값을 가지는 필드를 key로 정해야 하지만 어쩔수 없이 중복될 가능성이 있다면 몇가지 항목을 더해서 중복될수 없게 key값을 정해주어야함 
    그럼 key값으로 index값을 가져와서 쓰면안되나? >> 추가 삭제되면서 index가 바뀌기 때문에
    고유한 id값과 달라지는 경우가 생길 수 있기때문에 하지않는 것이 바람직함 

14. Vue component
    자주 사용되는 instanse라면 component로 만들어서 아무곳에서나 사용하는 것 

    1. 전역 컴포넌트 등록 // 어디서든 전역에서 사용가능 사용할때는 tag-name으로 태그를 만듬 
        vue.component(tag-name, {
            template = `` // html 태그가 들어감  >> 단 하나의 태그에 들어가야된다는 규칙이 존재 
            data() { return } // component에서는 data가 아니라 data()인 함수로 정의해줌 
                                data로 쓰면 reference로 되서 다른 곳에서 사용되는 애들도 업데이트가 되버림  
            methods {} // 
        })

    2. 지역 컴포넌트 등록 
        변수안에다가 전역 컴포넌트와 마찬가지로 template data methods등 오브젝트를 넣고 
        사용하려는 vue instanse에서 component: 라는 값으로
        component: {
            tag-name: local_component_name // 이렇게 사용할 태그이름, 변수이름을 선언하여 
        } 